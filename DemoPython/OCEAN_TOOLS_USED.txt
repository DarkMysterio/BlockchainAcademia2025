🌊 Ocean Protocol Functions & Tools - Complete Reference Guide

═══════════════════════════════════════════════════════════════════════════════

📚 DETAILED OCEAN PROTOCOL FUNCTIONS USED:

1. OCEAN.PY LIBRARY CORE
   • Library: ocean-lib (v3.1.2)
   • Purpose: Python interface for Ocean Protocol blockchain operations
   • Installation: pip install ocean-lib
   • Usage: Main entry point for all Ocean Protocol functionality

2. CONFIGURATION FUNCTIONS
   
   🔧 get_config_dict(network_url)
   • Module: ocean_lib.example_config.get_config_dict
   • Purpose: Creates Ocean Protocol configuration dictionary for specific networks
   • Parameters: network_url (string) - blockchain RPC endpoint
   • Returns: Dictionary with blockchain settings, metadata cache, provider URLs
   • Example: config = get_config_dict("https://polygon-mumbai.g.alchemy.com/v2/demo")
   • What it does: Sets up all necessary URLs and parameters for Ocean contracts

3. CORE OCEAN CLASS
   
   🌊 Ocean(config)
   • Module: ocean_lib.ocean.ocean.Ocean
   • Purpose: Main Ocean Protocol interface class
   • Parameters: config (dict) - configuration from get_config_dict()
   • Returns: Ocean instance with access to all protocol features
   • Example: ocean = Ocean(config)
   • What it does: Initializes connection to Ocean contracts and services

4. ASSET PUBLISHING FUNCTIONS
   
   📊 ocean.assets.create_url_asset()
   • Method: ocean.assets.create_url_asset(name, url, tx_dict, pricing, metadata)
   • Purpose: Publishes a data asset from URL to Ocean Protocol
   • Parameters:
     - name (string): Human-readable asset name
     - url (string): URL where data can be accessed
     - tx_dict (dict): Transaction parameters including {"from": account}
     - pricing (optional): Pricing schema for asset access
     - metadata (optional): Additional asset metadata
   • Returns: Tuple (data_nft, datatoken, ddo)
     - data_nft: ERC-721 token representing ownership
     - datatoken: ERC-20 token for access control
     - ddo: Data Descriptor Object with asset metadata
   • Example: (nft, token, ddo) = ocean.assets.create_url_asset("Volunteer Data", url, {"from": alice})
   • What it does: Creates blockchain-based data asset with ownership and access tokens

5. FILE STRUCTURE OBJECTS
   
   📁 UrlFile(url)
   • Module: ocean_lib.structures.file_objects.UrlFile
   • Purpose: Represents a data file accessible via URL
   • Parameters: url (string) - URL to data file
   • Returns: UrlFile object for Ocean publishing
   • Example: url_file = UrlFile(url="https://example.com/data.json")
   • What it does: Wraps URL data source for Ocean Protocol publishing

6. PRICING MECHANISMS
   
   💰 ExchangeArguments()
   • Module: ocean_lib.models.fixed_rate_exchange.ExchangeArguments
   • Purpose: Defines fixed-rate pricing for data assets
   • Parameters:
     - rate: Price per access in wei (use to_wei() helper)
     - base_token_addr: Token used for payment (OCEAN token address)
     - owner_addr: Address receiving payments
     - publish_market_order_fee_address: Market fee recipient
     - publish_market_order_fee_token: Token for market fees
     - publish_market_order_fee_amount: Fee amount
     - publish_market_swap_fee: Swap fee percentage
   • Example: ExchangeArguments(rate=to_wei("1"), base_token_addr=ocean.OCEAN_token.address)
   • What it does: Sets up paid access to data assets with automatic token exchange

   🆓 Free Pricing (None)
   • Value: None or omitted pricing parameter
   • Purpose: Makes data asset freely accessible without payment
   • Example: ocean.assets.create_url_asset(name, url, tx_dict, pricing=None)
   • What it does: Creates public data asset with no access restrictions

7. UTILITY FUNCTIONS
   
   ⚖️ to_wei(amount)
   • Module: ocean_lib.ocean.util.to_wei
   • Purpose: Converts human-readable numbers to blockchain wei format
   • Parameters: amount (string) - amount in OCEAN tokens
   • Returns: Integer in wei (smallest unit)
   • Example: to_wei("1") returns 1000000000000000000 (1 OCEAN in wei)
   • What it does: Handles decimal precision for blockchain transactions

8. TOKEN MANAGEMENT
   
   🎫 Datatoken Operations
   • datatoken.symbol(): Returns token symbol (e.g., "OCEAN-123")
   • datatoken.address: Contract address of the datatoken
   • Purpose: Access control tokens for specific datasets
   • What it does: Each dataset gets unique ERC-20 token for access control

   📊 Data NFT Operations
   • data_nft.symbol(): Returns NFT symbol
   • data_nft.address: Contract address of the Data NFT
   • Purpose: Ownership token for dataset (ERC-721)
   • What it does: Proves ownership of published data asset

9. METADATA MANAGEMENT
   
   📝 DDO (Data Descriptor Object)
   • ddo.did: Decentralized Identifier for the asset
   • ddo.metadata: Asset metadata (title, description, tags, etc.)
   • Purpose: Permanent identifier and metadata storage
   • Format: "did:op:0x123abc..." - globally unique identifier
   • What it does: Creates permanent, resolvable reference to data asset

10. BLOCKCHAIN INTEGRATION
    
    🌐 ocean.web3
    • Property: ocean.web3 - Web3 instance
    • Purpose: Direct blockchain interaction
    • Methods:
      - ocean.web3.eth.get_balance(address): Check ETH balance
      - ocean.web3.from_wei(balance, 'ether'): Convert wei to ETH
      - ocean.web3.eth.chain_id: Get blockchain network ID
    • What it does: Provides low-level blockchain access through Ocean instance

11. ACCOUNT MANAGEMENT
    
    👤 Account Integration
    • from eth_account import Account
    • Account.from_key(private_key): Create account from private key
    • Usage in tx_dict: {"from": account} for transaction signing
    • Purpose: Ethereum account management for transactions
    • What it does: Handles private key management and transaction signing

═══════════════════════════════════════════════════════════════════════════════

🎯 COMPLETE WORKFLOW EXAMPLE:

```python
# 1. Setup Ocean
from ocean_lib.example_config import get_config_dict
from ocean_lib.ocean.ocean import Ocean
from ocean_lib.ocean.util import to_wei
from ocean_lib.models.fixed_rate_exchange import ExchangeArguments
from eth_account import Account

# 2. Configure for specific network
config = get_config_dict("https://polygon-mumbai.g.alchemy.com/v2/demo")
ocean = Ocean(config)

# 3. Setup account
private_key = "0x..."
alice = Account.from_key(private_key)

# 4. Publish free asset
(free_nft, free_token, free_ddo) = ocean.assets.create_url_asset(
    name="Romanian Volunteer Directory",
    url="https://example.com/volunteer-data.json",
    tx_dict={"from": alice},
    pricing=None,  # Free access
    metadata={
        "name": "Romanian NGO Volunteer Directory",
        "description": "Public volunteer verification data",
        "author": "Romanian NGO Association",
        "tags": ["volunteers", "romania", "verification"]
    }
)

# 5. Publish paid asset
paid_pricing = ExchangeArguments(
    rate=to_wei("1"),  # 1 OCEAN token per access
    base_token_addr=ocean.OCEAN_token.address,
    owner_addr=alice.address
)

(paid_nft, paid_token, paid_ddo) = ocean.assets.create_url_asset(
    name="Premium Volunteer Verification",
    url="https://example.com/premium-data.json",
    tx_dict={"from": alice},
    pricing=paid_pricing,
    metadata={
        "name": "Premium Volunteer Background Checks",
        "description": "Detailed verification with certifications",
        "license": "Commercial"
    }
)

# 6. Use results for Soul-Bound Token integration
volunteer_did = free_ddo.did  # Store in SBT contract
verification_token = paid_token.address  # Use for access control
```

═══════════════════════════════════════════════════════════════════════════════

🏆 SOUL-BOUND TOKEN INTEGRATION FUNCTIONS:

• ddo.did → Store in SBT contract for permanent volunteer record reference
• datatoken.address → Use in access control functions for premium features
• data_nft.address → Link to volunteer achievement NFTs
• metadata → Display volunteer information in applications
• ocean.web3 → Verify datatoken ownership before SBT minting

═══════════════════════════════════════════════════════════════════════════════

Every function serves the Romanian NGO volunteer verification system by creating
transparent, verifiable, and monetizable volunteer data on the blockchain! 🇷🇴🌊
